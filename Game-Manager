using { /Verse.org/Simulation }
using { /Fortnite.com/Characters }

Player_Extension:=class:

    Agent:agent
    MD:Game_Manager
    Cleanup:event()=event(){}

    IsActiveHandler()<suspends>:void=
         if(FC:=Agent.GetFortCharacter[]). race:
            Cleanup.Await()
            loop:
                if(FC.IsActive[]):
                    <# Spawn #>
                    FC.EliminatedEvent().Await()
                    <# Player Death #>
                else. Sleep(0.1)


using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /Verse.org/Simulation/Tags }

ExteriorDevice_tag:=class(tag):

Game_Manager := class(creative_device):

    var PEMap:[agent]Player_Extension=map{}
    var ed:?ExteriorDeviceClass=false

    Cleanup:event()=event(){}

    OnBegin<override>()<suspends>:void=
        for(T:FindCreativeObjectsWithTag(ExteriorDevice_tag{}),O:=ExteriorDeviceClass[T]). set ed=option. O
        spawn{AsyncJoinHandler()}

    var HandledPlayers:int=0
    AsyncJoinHandler()<suspends>:void=
        race:
            Cleanup.Await()
            loop. if(CPlayers:=GetPlayspace().GetPlayers(),L:=CPlayers.Length>HandledPlayers){for(P:CPlayers,not PEMap[P]){HandlePlayerJoin(P,L)}}else{Sleep(0.1)}
            loop. HandlePlayerLeaving(GetPlayspace().PlayerRemovedEvent().Await())

    HandlePlayerJoin(P:player,L:int):void=
        spawn{P.Extension().IsActiveHandler()}
        set HandledPlayers=L

    (InAgent:agent).Extension():pl_gag_Player_Extension=
        if(Out:=PEMap[InAgent]){Out}else:
            NewDMD:=Player_Extension{Agent:=InAgent,MD:=Self}
            if(set PEMap[InAgent]=NewDMD){}
            NewDMD

    HandlePlayerLeaving(OutPlayer:agent):void=
        var Temp:[agent]Player_Extension=map:
        for(AKey->EVal:PEMap,AKey<>OutPlayer,set Temp[AKey]=EVal){}
        set PEMap=Temp
        set HandledPlayers-=1

    OnEnd<override>():void= 
        for(AgentKey->ExtensionVal:PEMap). ExtensionVal.Cleanup.Signal()
        Cleanup.Signal()
