
array_utils:=module:

  (Arr:[]x).AddUniqueElement(In:x where x:subtype(comparable)):[]x= 
      if(Arr.Find[In]){Arr}else{Arr+array{In}}

  (InArray:[]t where t:subtype(comparable)).RemoveUniqueElements():[]t=
      var Temp:[]t=array:
      for(E:InArray,not Temp.Find[E]){set Temp+=array{E}}
      Temp

map_utils:=module:

  (Input1:[x]t).RemoveWithKey(Input2:x where t:type,x:subtype(comparable)):[x]t= 
      var Out:[x]t=map{}
      for(K->V:Input1,K<>Input2). (set Out[K]=V)or void
      Out
