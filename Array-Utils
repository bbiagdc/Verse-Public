
<# 
    takes in an array and a single element of a comparable type
    then returns the input array if the single element is already in the array, otherwise returns a new array with the single element added to the input array 
#>
(Arr:[]x).AddUniqueElement(In:x where x:subtype(comparable)):[]x= if. Arr.Find[In] then Arr else Arr + array. In
<# 
    takes in an int array
    then goes through every index and prints out the index and it's stored value 
#>
ToDo: make one of these for float, and chars?
(Arr:[]int).PrintIntArray():void= for. Index->Element:Arr do Print("Index: {Index} Element: {Element}")
<#
    takes in an array
    Removes every element past the player display limit - 1
#>
(Arr:[]x).Trim(IndexToEndAt:int where x : type):[]x= if. Out := Arr.Remove[IndexToEndAt, Arr.Length-1] then return Out else return Arr
